name: Azure Install/Update & Configure OpenTelemetry Agent

on:
  schedule:
    - cron: "0 0 1 * *"  # Runs at 00:00 UTC on the 1st of every month
  workflow_dispatch:  # Allows manual execution

jobs:
  otel-contrib-agent:
    permissions:
      id-token: write  # Required for OIDC token fetching
      contents: read   # Required for actions/checkout
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.CHARAN_TOKEN }}
      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Get Azure Linux VMs by OTEL Tag
        id: get-linux-vms
        run: |
          echo "Querying all VMs with OTEL=True..."
          az vm list \
            --show-details \
            --query "[?tags.OTEL == 'True'].{name:name, resourceGroup:resourceGroup, powerState:powerState}" \
            --output tsv > linux_vms.tsv
          
          if [[ ! -s linux_vms.tsv ]]; then
            echo "No Linux VMs found with OTEL=True tag"
            exit 0
          fi
          
          echo "Contents of linux_vms.tsv:"
          cat linux_vms.tsv
          
          VM_NAMES=$(awk '{print $1}' linux_vms.tsv | tr '\n' ' ' | sed 's/ *$//')
          echo "Found Linux VM Names: $VM_NAMES"
          echo "VM_NAMES=$VM_NAMES" >> $GITHUB_ENV

      - name: Upload TSV as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-vms-tsv
          path: linux_vms.tsv

      - name: Check VMs/Architectures/Status
        run: |
          ACTIVE_VM_NAMES=()
          SKIPPED_VMS=()
          mkdir -p vm_architecture_logs
          
          while IFS=

      - name: Upload VM Architecture Logs
        uses: actions/upload-artifact@v4
        with:
          name: vm-architecture-logs
          path: vm_architecture_logs/\t' read -r VM_NAME RESOURCE_GROUP VM_STATE; do
            echo "Checking $VM_NAME in resource group $RESOURCE_GROUP"
            
            # DEBUG: Validate Azure authentication
            az account show --query 'name' --output text > /dev/null 2>&1 || { echo "!!!Azure authentication failed!"; exit 1; }
            
            # Get current VM state if not available or unknown
            if [[ -z "$VM_STATE" || "$VM_STATE" == "Unknown" ]]; then
              echo "VM_STATE missing or unknown for $VM_NAME, querying Azure..."
              VM_STATE=$(az vm get-instance-view \
                --name "$VM_NAME" \
                --resource-group "$RESOURCE_GROUP" \
                --query 'instanceView.statuses[?code==`PowerState/running`].displayStatus' \
                --output tsv 2>&1) || {
                echo "!!!Failed to get VM state for $VM_NAME: $VM_STATE"
                SKIPPED_VMS+=("$VM_NAME")
                continue
              }
            fi
            
            if [[ -z "$VM_STATE" || "$VM_STATE" == "null" ]]; then
              echo "!!!Unable to retrieve state for $VM_NAME. Skipping..."
              SKIPPED_VMS+=("$VM_NAME")
              continue
            fi
            
            if [[ "$VM_STATE" != "PowerState/running" && "$VM_STATE" != "VM running" ]]; then
              echo "!!!VM $VM_NAME is in state: $VM_STATE. Skipping..."
              SKIPPED_VMS+=("$VM_NAME")
              continue
            fi
            
            echo "VM $VM_NAME is running. Proceeding with architecture check."
            ACTIVE_VM_NAMES+=("$VM_NAME")
            
            echo "Querying architecture for $VM_NAME..."
            
            # Get VM size to determine architecture
            VM_SIZE=$(az vm show \
              --name "$VM_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --query 'hardwareProfile.vmSize' \
              --output text 2>&1) || {
              echo "!!!Failed to get VM size for $VM_NAME: $VM_SIZE"
              SKIPPED_VMS+=("$VM_NAME")
              continue
            }
            
            if [[ -z "$VM_SIZE" || "$VM_SIZE" == "null" ]]; then
              echo "!!!VM size response empty for $VM_NAME. Skipping..."
              SKIPPED_VMS+=("$VM_NAME")
              continue
            fi
            
            # Map VM size to architecture
            case "$VM_SIZE" in
              *_A*|*_D*|*_E*|*_F*|*_G*|*_H*|*_L*|*_M*|*_N*|*_S*|Standard_B*|Standard_DC*|Standard_NC*|Standard_ND*|Standard_NP*|Standard_NV*)
                ARCH_NAME="amd64"
                ;;
              *ps_*|*pbs_*|*pd_*|*pm_*|*Dpls_*|*Epls_*|*Epsv*)
                ARCH_NAME="arm64"
                ;;
              *)
                echo "!!!Unsupported VM size: $VM_SIZE on $VM_NAME. Skipping..."
                SKIPPED_VMS+=("$VM_NAME")
                continue
                ;;
            esac
            
            echo "VM $VM_NAME is using architecture: $ARCH_NAME"
            echo "VM: $VM_NAME, RG: $RESOURCE_GROUP, Size: $VM_SIZE, Architecture: $ARCH_NAME" >> "vm_architecture_logs/${VM_NAME}.log"
            
            # Create safe environment variable names
            SAFE_VM_NAME=$(echo "$VM_NAME" | tr -C '[:alnum:]' '_' | sed 's/^[0-9]/_&/')
            
            if [[ -n "$SAFE_VM_NAME" ]]; then
              echo "ARCH_$SAFE_VM_NAME=$ARCH_NAME" >> $GITHUB_ENV
              echo "RG_$SAFE_VM_NAME=$RESOURCE_GROUP" >> $GITHUB_ENV
            fi
            
            sleep 1  # Avoid Azure API rate limits
          done < linux_vms.tsv
          
          echo "SKIPPED_VMS=${SKIPPED_VMS[*]}" >> $GITHUB_ENV
          if [[ ${#ACTIVE_VM_NAMES[@]} -eq 0 ]]; then
            echo "!!!No active VMs found! Exiting..."
            exit 0
          fi
          
          echo "ACTIVE_VM_NAMES=${ACTIVE_VM_NAMES[*]}" >> $GITHUB_ENV

      - name: Upload VM Architecture Logs
        uses: actions/upload-artifact@v4
        with:
          name: vm-architecture-logs
          path: vm_architecture_logs/