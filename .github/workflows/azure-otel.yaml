name: Azure Install/Update & Configure OpenTelemetry Agent

on:
  schedule:
    - cron: "0 0 1 * *"  # Runs at 00:00 UTC on the 1st of every month
  workflow_dispatch:  # Allows manual execution

jobs:
  otel-contrib-agent:
    permissions:
      id-token: write  # Required for OIDC token fetching
      contents: read   # Required for actions/checkout
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.CHARAN_TOKEN }}
      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Get Azure Linux VMs by OTEL Tag
        id: get-linux-vms
        run: |
          echo "Querying all VMs with OTEL=True..."
          az vm list \
            --show-details \
            --query "[?tags.OTEL == 'True'].{name:name, resourceGroup:resourceGroup, powerState:powerState}" \
            --output tsv > linux_vms.tsv
          
          if [[ ! -s linux_vms.tsv ]]; then
            echo "No Linux VMs found with OTEL=True tag"
            exit 0
          fi
          
          echo "Contents of linux_vms.tsv:"
          cat linux_vms.tsv
          
          VM_NAMES=$(awk '{print $1}' linux_vms.tsv | tr '\n' ' ' | sed 's/ *$//')
          echo "Found Linux VM Names: $VM_NAMES"
          echo "VM_NAMES=$VM_NAMES" >> $GITHUB_ENV

      - name: Upload TSV as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-vms-tsv
          path: linux_vms.tsv

      - name: Get VM Architecture for Running VMs
        run: |
          ACTIVE_VM_NAMES=()
          SKIPPED_VM_NAMES=()
          mkdir -p vm_architecture_logs
          mkdir -p vm_skipped_logs
          
          while IFS=$'\t' read -r VM_NAME RESOURCE_GROUP VM_STATE; do
            echo "Processing $VM_NAME in resource group $RESOURCE_GROUP"
            
            # Check if VM is running
            if [[ "$VM_STATE" == "PowerState/running" || "$VM_STATE" == "VM running" ]]; then
              echo "VM $VM_NAME is running. Getting architecture..."
              
              # Get VM size to determine architecture
              VM_SIZE=$(az vm show \
                --name "$VM_NAME" \
                --resource-group "$RESOURCE_GROUP" \
                --query 'hardwareProfile.vmSize' \
                --output tsv 2>/dev/null)
              
              if [[ -n "$VM_SIZE" ]]; then
                echo "VM Size: $VM_SIZE" >> "vm_architecture_logs/${VM_NAME}.log"
                
                # Map VM size to architecture
                case "$VM_SIZE" in
                  *_A*|*_D*|*_E*|*_F*|*_G*|*_H*|*_L*|*_M*|*_N*|*_S*|Standard_B*|Standard_DC*|Standard_NC*|Standard_ND*|Standard_NP*|Standard_NV*)
                    ARCH_NAME="amd64"
                    ;;
                  *ps_*|*pbs_*|*pd_*|*pm_*|*Dpls_*|*Epls_*|*Epsv*)
                    ARCH_NAME="arm64"
                    ;;
                  *)
                    echo "Unknown VM size pattern: $VM_SIZE, defaulting to amd64" >> "vm_architecture_logs/${VM_NAME}.log"
                    ARCH_NAME="amd64"
                    ;;
                esac
                
                echo "VM $VM_NAME architecture: $ARCH_NAME"
                echo "VM: $VM_NAME, RG: $RESOURCE_GROUP, Architecture: $ARCH_NAME" >> "vm_architecture_logs/${VM_NAME}.log"
                ACTIVE_VM_NAMES+=("$VM_NAME")
                
                # Create safe environment variable names
                SAFE_VM_NAME=$(echo "$VM_NAME" | tr -C '[:alnum:]' '_' | sed 's/^[0-9]/_&/')
                
                if [[ -n "$SAFE_VM_NAME" ]]; then
                  echo "ARCH_$SAFE_VM_NAME=$ARCH_NAME" >> $GITHUB_ENV
                  echo "RG_$SAFE_VM_NAME=$RESOURCE_GROUP" >> $GITHUB_ENV
                fi
              else
                echo "Could not determine VM size for $VM_NAME"
                echo "VM: $VM_NAME, RG: $RESOURCE_GROUP, Reason: Could not determine VM size" >> "vm_skipped_logs/${VM_NAME}_skipped.log"
                SKIPPED_VM_NAMES+=("$VM_NAME (size detection failed)")
              fi
            else
              echo "VM $VM_NAME is not running (state: $VM_STATE). Skipping architecture detection."
              echo "VM: $VM_NAME, RG: $RESOURCE_GROUP, State: $VM_STATE, Reason: VM not running" >> "vm_skipped_logs/${VM_NAME}_skipped.log"
              SKIPPED_VM_NAMES+=("$VM_NAME ($VM_STATE)")
            fi
            
            sleep 1  # Avoid Azure API rate limits
          done < linux_vms.tsv

          echo "Active VMs with architecture detected: ${ACTIVE_VM_NAMES[*]}"
          echo "Skipped VMs: ${SKIPPED_VM_NAMES[*]}"
          echo "ACTIVE_VM_NAMES=${ACTIVE_VM_NAMES[*]}" >> $GITHUB_ENV
          echo "SKIPPED_VM_NAMES=${SKIPPED_VM_NAMES[*]}" >> $GITHUB_ENV

      - name: Upload VM Processing Logs
        uses: actions/upload-artifact@v4
        with:
          name: vm-processing-logs
          path: |
            vm_architecture_logs/
            vm_skipped_logs/

      - name: Summary Report
        run: |
          echo "=== VM Processing Summary ==="
          echo "Total VMs found with OTEL=True tag: $(wc -l < linux_vms.tsv)"
          
          # Handle active VMs
          if [[ -n "$ACTIVE_VM_NAMES" && "$ACTIVE_VM_NAMES" != " " ]]; then
            ACTIVE_COUNT=$(echo "$ACTIVE_VM_NAMES" | wc -w)
          else
            ACTIVE_COUNT=0
          fi
          
          # Handle skipped VMs
          if [[ -n "$SKIPPED_VM_NAMES" && "$SKIPPED_VM_NAMES" != " " ]]; then
            SKIPPED_COUNT=$(echo "$SKIPPED_VM_NAMES" | wc -w)
          else
            SKIPPED_COUNT=0
          fi
          
          echo "Active VMs processed: $ACTIVE_COUNT"
          echo "Skipped VMs: $SKIPPED_COUNT"
          echo ""
          echo "=== Active VMs ==="
          if [[ $ACTIVE_COUNT -gt 0 ]]; then
            echo "$ACTIVE_VM_NAMES" | tr ' ' '\n' | while read -r vm; do
              if [[ -n "$vm" ]]; then
                echo "  - $vm"
              fi
            done
          else
            echo "  No active VMs found"
          fi
          echo ""
          echo "=== Skipped VMs ==="
          if [[ $SKIPPED_COUNT -gt 0 ]]; then
            echo "$SKIPPED_VM_NAMES" | tr ' ' '\n' | while read -r vm; do
              if [[ -n "$vm" ]]; then
                echo "  - $vm"
              fi
            done
          else
            echo "  No VMs were skipped"
          fi

      - name: Copy Missing Config Files and Commit - Linux
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
         
          CHANGES_MADE=false
         
          for VM_NAME in $ACTIVE_VM_NAMES; do
            CONFIG_FILE="agents/otel/config/Linux/$VM_NAME.yaml"
        
            # If the config file is missing, copy the default config and commit it
            if [[ ! -f "$CONFIG_FILE" ]]; then
              echo "Config file for $VM_NAME not found. Copying default..."
              cp agents/otel/config/aws-otel-agent-coralogix-sherpa.yaml "$CONFIG_FILE"
              git add "$CONFIG_FILE"
              CHANGES_MADE=true
            fi
          done

          # Commit and push if new config files were copied
          if [[ "$CHANGES_MADE" == true ]]; then
            git commit -m "Copy default config files for instances [ci skip]"
            git push origin main
          else
            echo "No new config files copied, no push needed."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.CHARAN_TOKEN }}

      - name: Inject Private API Key into Config Files
        run: |
          CHANGES_MADE=false
          for VM_NAME in $ACTIVE_VM_NAMES; do
            CONFIG_FILE="agents/otel/config/Linux/$VM_NAME.yaml"
            # Replace Private API key in the config file (if needed)
            if [[ -f "$CONFIG_FILE" ]]; then
              sed -i "s/private_key: \"REPLACE_ME\"/private_key: \"${SHERPA_PRIVATE_KEY}\"/" "$CONFIG_FILE"
              if git diff --exit-code "$CONFIG_FILE" > /dev/null; then
                echo "No changes made to $CONFIG_FILE"
              else
                git add "$CONFIG_FILE"
                CHANGES_MADE=true
              fi
            fi
          done

          if [[ "$CHANGES_MADE" == true ]]; then
            git commit -m "Update private API key in config files [ci skip]"
            git push origin main
          else
            echo "No config files updated with API key, no push needed."
          fi
        env:
          SHERPA_PRIVATE_KEY: ${{ secrets.SHERPA_PRIVATE_KEY }}
          GITHUB_TOKEN: ${{ secrets.CHARAN_TOKEN }}

      - name: Install or Update OpenTelemetry Agent per Instance
        run: |
          INSTALLED_VM_NAMES=()
          UPDATED_VM_NAMES=()
          INSTALLED_VERSIONS=()
          
          # Fetch latest OpenTelemetry version
          LATEST_VERSION=$(curl -s https://api.github.com/repos/open-telemetry/opentelemetry-collector-releases/releases/latest | jq -r '.tag_name' | sed 's/v//')
          echo "Latest OpenTelemetry Collector version: $LATEST_VERSION"

          for VM_NAME in $ACTIVE_VM_NAMES; do
            echo "Processing OpenTelemetry installation check for $VM_NAME"
            
            # Get the safe VM name and resource group from environment variables
            SAFE_VM_NAME=$(echo "$VM_NAME" | tr -C '[:alnum:]' '_' | sed 's/^[0-9]/_&/')
            RESOURCE_GROUP_VAR="RG_$SAFE_VM_NAME"
            RESOURCE_GROUP="${!RESOURCE_GROUP_VAR}"
            ARCH_VAR="ARCH_$SAFE_VM_NAME"
            ARCH="${!ARCH_VAR}"
            
            if [[ -z "$RESOURCE_GROUP" ]]; then
              echo "!!!Resource group not found for $VM_NAME. Skipping..."
              continue
            fi
            
            if [[ -z "$ARCH" ]]; then
              echo "!!!Architecture not found for $VM_NAME. Skipping..."
              continue
            fi
            
            echo "Checking OpenTelemetry installation status on $VM_NAME in resource group $RESOURCE_GROUP with architecture $ARCH"
            
            # Check if OpenTelemetry is installed using Azure VM Run Command
            CHECK_VERSION_RESULT=$(az vm run-command invoke \
              --name "$VM_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --command-id RunShellScript \
              --scripts 'if command -v /usr/local/bin/otelcol-agent; then /usr/local/bin/otelcol-agent --version | awk '\''{for (i=1; i<=NF; i++) if ($i ~ /^[0-9]+\.[0-9]+/) print $i}'\'' | grep -oE '\''[0-9]+(\.[0-9]+)*'\''; else echo NOT_INSTALLED; fi' \
              --query 'value[0].message' \
              --output tsv 2>&1)
            
            if [[ $? -ne 0 ]]; then
              echo "!!!Failed to send version check command to $VM_NAME: $CHECK_VERSION_RESULT"
              continue
            fi
            
            if [[ -z "$CHECK_VERSION_RESULT" || "$CHECK_VERSION_RESULT" == "null" ]]; then
              echo "!!!Empty response from version check command for $VM_NAME. Skipping..."
              continue
            fi Janssens
            
            # Extract version or installation status from the result
            CURRENT_VERSION=$(echo "$CHECK_VERSION_RESULT" | grep -oE '[0-9]+(\.[0-9]+)*' | head -1)
            
            if [[ "$CHECK_VERSION_RESULT" == *"NOT_INSTALLED"* || -z "$CURRENT_VERSION" ]]; then
              echo "!!! OpenTelemetry Agent is NOT installed on $VM_NAME. Proceeding with installation..."
              INSTALLED_VM_NAMES+=("$VM_NAME")
            elif [[ "$CURRENT_VERSION" != "$LATEST_VERSION" ]]; then
              echo "Upgrading OpenTelemetry Agent on $VM_NAME (from $CURRENT_VERSION to $LATEST_VERSION)..."
              UPDATED_VM_NAMES+=("$VM_NAME")
            else
              echo "OpenTelemetry Agent is already up-to-date ($LATEST_VERSION) on $VM_NAME. Skipping update."
              INSTALLED_VERSIONS+=("$VM_NAME:$CURRENT_VERSION")
              continue
            fi
            
            # Construct OTEL download URL
            OTEL_URL="https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v${LATEST_VERSION}/otelcol-contrib_${LATEST_VERSION}_linux_${ARCH}.tar.gz"
            
            # Check if config files exist before installing
            CONFIG_FILE="agents/otel/config/Linux/$VM_NAME.yaml"
            if [[ ! -f "$CONFIG_FILE" ]]; then
              echo "!!!Config file for $VM_NAME not found! Skipping..."
              continue
            fi
            CONFIG_CONTENT=$(base64 -w 0 < "$CONFIG_FILE")
            
            SERVICE_FILE="agents/otel/config/Linux/otelcol-agent.service.yaml"
            if [[ ! -f "$SERVICE_FILE" ]]; then
              echo "!!!Service file not found! Skipping..."
              continue
            fi
            
            SERVICE_CONTENT=$(base64 -w 0 < "$SERVICE_FILE")
            
            # Install or update OpenTelemetry
            INSTALL_RESULT=$(az vm run-command invoke \
              --name "$VM_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --command-id RunShellScript \
              --scripts "
                wget -O /tmp/otelcol.tar.gz \"$OTEL_URL\" && \
                tar -xvf /tmp/otelcol.tar.gz -C /tmp && \
                mv -f /tmp/otelcol-contrib /usr/local/bin/otelcol-agent && \
                sudo chown root:root /usr/local/bin/otelcol-agent && \
                chmod +x /usr/local/bin/otelcol-agent && \
                echo \"$CONFIG_CONTENT\" | base64 --decode | sudo tee /etc/otel-agent-config.yaml > /dev/null && \
                echo \"$SERVICE_CONTENT\" | base64 --decode | sudo tee /etc/systemd/system/otelcol-agent.service > /dev/null && \
                sudo systemctl daemon-reload && \
                sudo systemctl enable otelcol-agent && \
                sudo systemctl restart otelcol-agent && \
                sleep 5 && \
                if [[ \$(systemctl is-active otelcol-agent) == 'active' ]]; then echo 'OpenTelemetry Agent is running successfully!'; else echo '❌ OpenTelemetry Agent failed to start. Showing logs:'; sudo journalctl -u otelcol-agent --no-pager --lines=50; exit 1; fi
              " \
              --query 'value[0].message' \
              --output tsv 2>&1)
            
            if [[ $? -ne 0 ]]; then
              echo "!!!Failed to install/update OpenTelemetry on $VM_NAME: $INSTALL_RESULT"
              continue
            fi
            
            echo "OpenTelemetry installation/update result for $VM_NAME: $INSTALL_RESULT"
            INSTALLED_VERSIONS+=("$VM_NAME:$LATEST_VERSION")
            
            sleep 2  # Avoid Azure API rate limits
          done
          
          echo "VMs requiring OpenTelemetry installation: ${INSTALLED_VM_NAMES[*]}"
          echo "VMs with existing OpenTelemetry updated: ${UPDATED_VM_NAMES[*]}"
          echo "INSTALLED_VM_NAMES=${INSTALLED_VM_NAMES[*]}" >> $GITHUB_ENV
          echo "UPDATED_VM_NAMES=${UPDATED_VM_NAMES[*]}" >> $GITHUB_ENV
          echo "INSTALLED_VERSIONS=${INSTALLED_VERSIONS[*]}" >> $GITHUB_ENV
        run: |
          INSTALLED_VM_NAMES=()
          UPDATED_VM_NAMES=()
          INSTALLED_VERSIONS=()
          
          for VM_NAME in $ACTIVE_VM_NAMES; do
            echo "Processing OpenTelemetry installation check for $VM_NAME"
            
            # Get the safe VM name and resource group from environment variables
            SAFE_VM_NAME=$(echo "$VM_NAME" | tr -C '[:alnum:]' '_' | sed 's/^[0-9]/_&/')
            RESOURCE_GROUP_VAR="RG_$SAFE_VM_NAME"
            RESOURCE_GROUP="${!RESOURCE_GROUP_VAR}"
            
            if [[ -z "$RESOURCE_GROUP" ]]; then
              echo "!!!Resource group not found for $VM_NAME. Skipping..."
              continue
            fi
            
            echo "Checking OpenTelemetry installation status on $VM_NAME in resource group $RESOURCE_GROUP"
            
            # Check if OpenTelemetry is installed using Azure VM Run Command
            CHECK_VERSION_RESULT=$(az vm run-command invoke \
              --name "$VM_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --command-id RunShellScript \
              --scripts 'if command -v /usr/local/bin/otelcol-agent; then /usr/local/bin/otelcol-agent --version | awk '\''{for (i=1; i<=NF; i++) if ($i ~ /^[0-9]+\.[0-9]+/) print $i}'\'' | grep -oE '\''[0-9]+(\.[0-9]+)*'\''; else echo NOT_INSTALLED; fi' \
              --query 'value[0].message' \
              --output tsv 2>&1)
            
            if [[ $? -ne 0 ]]; then
              echo "!!!Failed to send version check command to $VM_NAME: $CHECK_VERSION_RESULT"
              continue
            fi
            
            if [[ -z "$CHECK_VERSION_RESULT" || "$CHECK_VERSION_RESULT" == "null" ]]; then
              echo "!!!Empty response from version check command for $VM_NAME. Skipping..."
              continue
            fi
            
            # Extract version or installation status from the result
            CURRENT_VERSION=$(echo "$CHECK_VERSION_RESULT" | grep -oE '[0-9]+(\.[0-9]+)*' | head -1)
            
            if [[ "$CHECK_VERSION_RESULT" == *"NOT_INSTALLED"* || -z "$CURRENT_VERSION" ]]; then
              echo "OpenTelemetry is not installed on $VM_NAME"
              INSTALLED_VM_NAMES+=("$VM_NAME")
              INSTALLED_VERSIONS+=("NOT_INSTALLED")
            else
              echo "OpenTelemetry version $CURRENT_VERSION is installed on $VM_NAME"
              UPDATED_VM_NAMES+=("$VM_NAME")
              INSTALLED_VERSIONS+=("$CURRENT_VERSION")
            fi
            
            sleep 2  # Avoid Azure API rate limits
          done
          
          echo "VMs requiring OpenTelemetry installation: ${INSTALLED_VM_NAMES[*]}"
          echo "VMs with existing OpenTelemetry (potential updates): ${UPDATED_VM_NAMES[*]}"
          echo "INSTALLED_VM_NAMES=${INSTALLED_VM_NAMES[*]}" >> $GITHUB_ENV
          echo "UPDATED_VM_NAMES=${UPDATED_VM_NAMES[*]}" >> $GITHUB_ENV
          echo "INSTALLED_VERSIONS=${INSTALLED_VERSIONS[*]}" >> $GITHUB_ENV