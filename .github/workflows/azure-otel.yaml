name: Azure Install/Update & Configure OpenTelemetry Agent

on:
  schedule:
    - cron: "0 0 1 * *"  # Runs at 00:00 UTC on the 1st of every month
  workflow_dispatch:  # Allows manual execution

jobs:
  otel-contrib-agent:
    permissions:
      id-token: write  # Required for OIDC token fetching
      contents: read   # Required for actions/checkout
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.CHARAN_TOKEN }}

      - name: Validate Secrets
        run: |
          missing_secrets=()
          [[ -z "${{ secrets.AZURE_CLIENT_ID }}" ]] && missing_secrets+=("AZURE_CLIENT_ID")
          [[ -z "${{ secrets.AZURE_TENANT_ID }}" ]] && missing_secrets+=("AZURE_TENANT_ID")
          [[ -z "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ]] && missing_secrets+=("AZURE_SUBSCRIPTION_ID")
          [[ -z "${{ secrets.CHARAN_TOKEN }}" ]] && missing_secrets+=("CHARAN_TOKEN")
          if [[ ${#missing_secrets[@]} -gt 0 ]]; then
            echo "Error: Missing required secrets: ${missing_secrets[*]}"
            exit 1
          fi

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get Azure Linux VMs by OTEL Tag
        id: get-linux-vms
        run: |
          echo "Querying Linux VMs with OTEL=True..."
          az vm list \
            --show-details \
            --query "[?tags.OTEL == 'True' && storageProfile.osDisk.osType == 'Linux'].{name:name, resourceGroup:resourceGroup, powerState:powerState}" \
            --output tsv > linux_vms.tsv || { echo "Failed to list VMs"; exit 1; }
          
          if [[ ! -s linux_vms.tsv ]]; then
            echo "No Linux VMs found with OTEL=True tag"
            echo "VM_NAMES=" >> $GITHUB_ENV
            exit 0
          fi
          
          echo "Contents of linux_vms.tsv:"
          cat linux_vms.tsv
          
          VM_NAMES=$(awk -F'\t' '$1 && NF == 3 {print $1}' linux_vms.tsv | tr '\n' ' ' | sed 's/ *$//')
          if [[ -z "$VM_NAMES" ]]; then
            echo "Error: Failed to parse VM names from linux_vms.tsv"
            exit 1
          fi
          echo "Found Linux VM Names: $VM_NAMES"
          echo "VM_NAMES=$VM_NAMES" >> $GITHUB_ENV

      - name: Upload TSV as Artifact
        if: env.VM_NAMES != ''
        uses: actions/upload-artifact@v4
        with:
          name: linux-vms-tsv
          path: linux_vms.tsv

      - name: Check VMs/Architectures/Status
        run: |
          ACTIVE_VM_NAMES=()
          SKIPPED_VMS=()
          echo "Skipped VMs:" > skipped_vms.log
          mkdir -p debug_logs

          run_azure_cmd() {
            local cmd="$1"
            local vm_name="$2"
            local output_file="debug_logs/$vm_name.log"
            local retries=3
            local output=""
            for i in $(seq 1 $retries); do
              echo "Attempt $i for command: $cmd" >> "$output_file"
              output=$(bash -c "$cmd" 2>>"$output_file")
              local exit_code=$?
              if [[ $exit_code -eq 0 && -n "$output" ]]; then
                echo "$output"
                echo "Command succeeded with output: $output" >> "$output_file"
                return 0
              fi
              echo "Retry $i failed with exit code $exit_code" >> "$output_file"
              sleep $((i * 5))
            done
            echo "Command failed after $retries retries" >> "$output_file"
            echo "ERROR"
            return 1
          }

          while IFS=$'\t' read -r VM_NAME RESOURCE_GROUP VM_STATE; do
            echo "Checking $VM_NAME in resource group $RESOURCE_GROUP"
            
            # Handle missing or unknown VM_STATE
            if [[ -z "$VM_STATE" || "$VM_STATE" == "Unknown" ]]; then
              echo "!!!VM_STATE missing or unknown for $VM_NAME, querying Azure..."
              VM_STATE=$(run_azure_cmd "az vm get-instance-view --name '$VM_NAME' --resource-group '$RESOURCE_GROUP' --query 'instanceView.statuses[?starts_with(code, ''PowerState/'')].code' --output tsv" "$VM_NAME")
              if [[ "$VM_STATE" == "ERROR" ]]; then
                echo "!!!Failed to retrieve state for $VM_NAME after retries. Skipping..." | tee -a skipped_vms.log
                SKIPPED_VMS+=("$VM_NAME")
                continue
              fi
            fi

            if [[ "$VM_STATE" != "PowerState/running" ]]; then
              echo "!!!VM $VM_NAME is in state: $VM_STATE. Skipping..." | tee -a skipped_vms.log
              SKIPPED_VMS+=("$VM_NAME")
              continue
            fi

            echo "VM $VM_NAME is running. Proceeding with architecture check."
            ACTIVE_VM_NAMES+=("$VM_NAME")

            # Check architecture with retries
            CMD_OUTPUT=$(run_azure_cmd "az vm run-command invoke --name '$VM_NAME' --resource-group '$RESOURCE_GROUP' --command-id RunShellScript --scripts 'uname -m' --query 'value[0].message' --output json" "$VM_NAME")
            if [[ "$CMD_OUTPUT" == "ERROR" ]]; then
              echo "!!!Failed to retrieve architecture for $VM_NAME after retries. See debug_logs/$VM_NAME.log for details. Skipping..." | tee -a skipped_vms.log
              SKIPPED_VMS+=("$VM_NAME")
              continue
            fi

            # Log raw command output for debugging
            echo "Raw command output for $VM_NAME: $CMD_OUTPUT" >> debug_logs/$VM_NAME.log

            # Parse architecture using jq
            SYSTEM_ARCH=$(echo "$CMD_OUTPUT" | jq -r '. | split("[stdout]\n")[1] | split("\n[stderr]")[0] | split("\n") | join(" ") | split(" ") | join("")')
            if [[ -z "$SYSTEM_ARCH" ]]; then
              echo "!!!Failed to parse architecture for $VM_NAME. Raw output: $CMD_OUTPUT. See debug_logs/$VM_NAME.log for details. Skipping..." | tee -a skipped_vms.log
              SKIPPED_VMS+=("$VM_NAME")
              continue
            fi

            # Validate architecture
            case "$SYSTEM_ARCH" in
              x86_64) ARCH_NAME="amd64" ;;
              aarch64|arm64) ARCH_NAME="arm64" ;;
              *)
                echo "!!!Unsupported architecture: '$SYSTEM_ARCH' on $VM_NAME. Skipping..." | tee -a skipped_vms.log
                SKIPPED_VMS+=("$VM_NAME")
                continue
                ;;
            esac

            echo "VM $VM_NAME is using architecture: $ARCH_NAME"
            SAFE_VM_NAME=$(echo "$VM_NAME" | tr -C '[:alnum:]-' '_' | sed 's/^_*/_/;s/_*$/_/')
            if [[ -z "$SAFE_VM_NAME" || "$SAFE_VM_NAME" =~ ^[0-9] || "$SAFE_VM_NAME" =~ [^a-zA-Z0-9_-] ]]; then
              echo "!!!Invalid SAFE_VM_NAME for $VM_NAME: $SAFE_VM_NAME. Skipping environment variable setting..." | tee -a skipped_vms.log
              SKIPPED_VMS+=("$VM_NAME")
              continue
            fi
            echo "ARCH_$SAFE_VM_NAME=$ARCH_NAME" >> $GITHUB_ENV
            echo "RG_$SAFE_VM_NAME=$RESOURCE_GROUP" >> $GITHUB_ENV
            sleep 2  # Avoid Azure API rate limits
          done < linux_vms.tsv

          echo "Active VMs: ${ACTIVE_VM_NAMES[*]}"
          echo "Skipped VMs: ${SKIPPED_VMS[*]}"
          echo "SKIPPED_VMS=${SKIPPED_VMS[*]}" >> $GITHUB_ENV
          if [[ ${#ACTIVE_VM_NAMES[@]} -eq 0 ]]; then
            echo "!!!No active VMs found! Exiting with warning..." | tee -a skipped_vms.log
            exit 1
          fi

          echo "ACTIVE_VM_NAMES=${ACTIVE_VM_NAMES[*]}" >> $GITHUB_ENV
          
      - name: Upload Skipped VMs Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: skipped、とてもvms-log
          path: skipped_vms.log

      - name: Upload Debug Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: debug-logs
          path: debug_logs/