name: Azure Install/Update & Configure OpenTelemetry Agent

on:
  schedule:
    - cron: "0 0 1 * *"  # Runs at 00:00 UTC on the 1st of every month
  workflow_dispatch:  # Allows manual execution

jobs:
  otel-contrib-agent:
    permissions:
      id-token: write  # Required for OIDC token fetching
      contents: read  # Required for actions/checkout
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.CHARAN_TOKEN }}

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Get Azure Linux VMs by OTEL Tag
        id: get-linux-vms
        run: |
          echo "Querying all running VMs with OTEL=True..."
          az vm list \
          --show-details \
          --query "[?tags.OTEL == 'True'].{name:name, resourceGroup:resourceGroup, powerState:powerState}" \
          --output tsv > linux_vms.tsv
        
          if [[ ! -s linux_vms.tsv ]]; then
            echo "No Linux VMs found with OTEL=True tag"
            exit 0
          fi
          
          VM_NAMES=$(awk '{print $1}' linux_vms.tsv | tr '\n' ' ' | sed 's/ *$//')
          echo "Found Linux VM Names: $VM_NAMES"
          echo "VM_NAMES=$VM_NAMES" >> $GITHUB_ENV

      - name: Check VMs/Architectures/Status
        run: |
          ACTIVE_VM_NAMES=()
          SKIPPED_VMS=()

          while IFS=$'\t' read -r VM_NAME RESOURCE_GROUP; do
            echo "Checking $VM_NAME in resource group $RESOURCE_GROUP"
            
            # Verify VM state
            VM_STATE=$(az vm get-instance-view \
              --name "$VM_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --query "instanceView.statuses[?code=='PowerState/running'].code" \
              --output tsv 2>/dev/null || echo "ERROR")
            
            if [[ "$VM_STATE" != "PowerState/running" ]]; then
              echo "!!!VM $VM_NAME is in state: $VM_STATE. Skipping..."
              SKIPPED_VMS+=("$VM_NAME")
              continue
            fi

            echo "VM $VM_NAME is running. Proceeding with architecture check."
            ACTIVE_VM_NAMES+=("$VM_NAME")

            # Check architecture
            CMD_OUTPUT=$(az vm run-command invoke \
              --name "$VM_NAME" \
              --resource-group "$RESOURCE_GROUP" \
              --command-id RunShellScript \
              --scripts 'uname -m' \
              --query 'value[0].message' \
              --output tsv 2>/dev/null || echo "ERROR")
            
            if [[ "$CMD_OUTPUT" == "ERROR" || -z "$CMD_OUTPUT" ]]; then
              echo "!!!Failed to retrieve architecture for $VM_NAME. Skipping..."
              SKIPPED_VMS+=("$VM_NAME")
              continue
            fi

            SYSTEM_ARCH=$(echo "$CMD_OUTPUT" | tr -d '\n')
            case "$SYSTEM_ARCH" in
              x86_64) ARCH_NAME="amd64" ;;
              aarch64|arm64) ARCH_NAME="arm64" ;;
              *) echo "!!!Unsupported architecture: $SYSTEM_ARCH on $VM_NAME. Skipping..."; SKIPPED_VMS+=("$VM_NAME"); continue ;;
            esac

            echo "VM $VM_NAME is using architecture: $ARCH_NAME"

            SAFE_VM_NAME=$(echo "$VM_NAME" | tr '-' '_')
            echo "ARCH_$SAFE_VM_NAME=$ARCH_NAME" >> $GITHUB_ENV
            echo "RG_$SAFE_VM_NAME=$RESOURCE_GROUP" >> $GITHUB_ENV
          done < linux_vms.tsv

          echo "SKIPPED_VMS=${SKIPPED_VMS[*]}" >> $GITHUB_ENV
          if [[ ${#ACTIVE_VM_NAMES[@]} -eq 0 ]]; then
            echo "!!!No active VMs found! Exiting..."
            exit 0
          fi

          echo "ACTIVE_VM_NAMES=${ACTIVE_VM_NAMES[*]}" >> $GITHUB_ENV
