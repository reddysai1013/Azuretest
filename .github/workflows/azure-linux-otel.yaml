name: Azure Install/Update & Configure OpenTelemetry Agent via Run Command (Linux Environment)

on:
  schedule:
    - cron: "0 0 1 * *"  # Runs at 00:00 UTC on the 1st of every month

  workflow_dispatch:  # Allows manual execution

jobs:
  otel-contrib-agent:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.CHARAN_TOKEN }}

      - name: Azure CLI Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az version

      - name: Get Azure Linux VM IDs by OTEL Tag
        id: get-linux-vm-ids
        run: |
          echo "Querying all running Linux VMs with OTEL=True tag..."

          # Create output file
          > linux_vms.tsv

          # Get all subscriptions (if you have multiple)
          SUBSCRIPTIONS=$(az account list --query "[].id" -o tsv)
          
          for SUBSCRIPTION in $SUBSCRIPTIONS; do
            echo "Checking subscription: $SUBSCRIPTION"
            az account set --subscription "$SUBSCRIPTION"
            
            # Query Linux VMs with OTEL tag
            az vm list \
              --query "[?tags.OTEL=='True' && storageProfile.osDisk.osType=='Linux'].{id:id, name:name, resourceGroup:resourceGroup, location:location}" \
              -o tsv | while IFS=$'\t' read -r VM_ID VM_NAME RESOURCE_GROUP LOCATION; do
                echo -e "$VM_ID\t$VM_NAME\t$RESOURCE_GROUP\t$LOCATION\t$SUBSCRIPTION" >> linux_vms.tsv
              done
          done

          if [[ ! -s linux_vms.tsv ]]; then
            echo "No Linux VMs found with OTEL=True tag"
            exit 0
          fi

          # Extract VM IDs for processing
          VM_IDS=$(awk '{print $1}' linux_vms.tsv | tr '\n' ' ' | sed 's/ *$//')
          echo "Found Linux VM IDs: $VM_IDS"
          echo "VM_IDS=$VM_IDS" >> $GITHUB_ENV

      - name: Check VMs Status and Architecture
        run: |
          ACTIVE_VM_IDS=()
          SKIPPED_VMS=()

          while IFS=$'\t' read -r VM_ID VM_NAME RESOURCE_GROUP LOCATION SUBSCRIPTION; do
            echo "Checking $VM_NAME ($VM_ID) in resource group $RESOURCE_GROUP"
            
            # Set subscription context
            az account set --subscription "$SUBSCRIPTION"

            # Check VM power state
            POWER_STATE=$(az vm get-instance-view \
              --ids "$VM_ID" \
              --query "instanceView.statuses[?code=='PowerState/*'].displayStatus" \
              -o tsv 2>&1) || {
              echo "!!!Failed to get power state for $VM_NAME: $POWER_STATE"
              SKIPPED_VMS+=("$VM_NAME")
              continue
            }

            if [[ "$POWER_STATE" != "VM running" ]]; then
              echo "!!!VM $VM_NAME is not running (state: $POWER_STATE). Skipping..."
              SKIPPED_VMS+=("$VM_NAME")
              continue
            fi

            echo "VM $VM_NAME is running. Checking architecture..."
            ACTIVE_VM_IDS+=("$VM_ID")

            # Get VM architecture using run command
            ARCH_RESULT=$(az vm run-command invoke \
              --ids "$VM_ID" \
              --command-id RunShellScript \
              --scripts "uname -m" \
              --query "value[0].message" \
              -o tsv 2>&1) || {
              echo "!!!Failed to get architecture for $VM_NAME: $ARCH_RESULT"
              continue
            }

            # Extract architecture from result
            SYSTEM_ARCH=$(echo "$ARCH_RESULT" | grep -oE '(x86_64|aarch64|arm64)' | head -1)

            if [[ -z "$SYSTEM_ARCH" ]]; then
              echo "!!!Could not determine architecture for $VM_NAME. Skipping..."
              continue
            fi

            case "$SYSTEM_ARCH" in
              x86_64) ARCH_NAME="amd64" ;;
              aarch64|arm64) ARCH_NAME="arm64" ;;
              *) echo "!!!Unsupported architecture: $SYSTEM_ARCH on $VM_NAME. Skipping..."; continue ;;
            esac

            echo "VM $VM_NAME is using architecture: $ARCH_NAME"

            # Create safe variable names
            SAFE_VM_ID=$(echo "$VM_ID" | sed 's/[^a-zA-Z0-9_]/_/g')
            
            echo "ARCH_$SAFE_VM_ID=$ARCH_NAME" >> $GITHUB_ENV
            echo "NAME_$SAFE_VM_ID=$VM_NAME" >> $GITHUB_ENV
            echo "RG_$SAFE_VM_ID=$RESOURCE_GROUP" >> $GITHUB_ENV
            echo "LOC_$SAFE_VM_ID=$LOCATION" >> $GITHUB_ENV
            echo "SUB_$SAFE_VM_ID=$SUBSCRIPTION" >> $GITHUB_ENV

          done < linux_vms.tsv

          echo "SKIPPED_VMS=${SKIPPED_VMS[*]}" >> $GITHUB_ENV
          if [[ ${#ACTIVE_VM_IDS[@]} -eq 0 ]]; then
            echo "!!!No active VMs found! Exiting..."
            exit 0
          fi

          echo "ACTIVE_VM_IDS=${ACTIVE_VM_IDS[*]}" >> $GITHUB_ENV

      - name: Copy Missing Config Files and Commit - Linux
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
         
          CHANGES_MADE=false
         
          # Extract VM names from VM_IDS for config files
          while IFS=$'\t' read -r VM_ID VM_NAME RESOURCE_GROUP LOCATION SUBSCRIPTION; do
            CONFIG_FILE="agents/otel/config/Linux/$VM_NAME.yaml"
        
            # If the config file is missing, copy the default config and commit it
            if [[ ! -f "$CONFIG_FILE" ]]; then
              echo "Config file for $VM_NAME not found. Copying default..."
              cp agents/otel/config/azure-otel-agent-coralogix-sherpa.yaml "$CONFIG_FILE"
              git add "$CONFIG_FILE"
              CHANGES_MADE=true
            fi
          done < linux_vms.tsv

          # Commit and push if new config files were copied
          if [[ "$CHANGES_MADE" == true ]]; then
            git commit -m "Copy default config files for Azure VMs [ci skip]"
            git push origin main
          else
            echo "No new config files copied, no push needed."
          fi

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Inject Private API Key into Config Files
        run: |
          while IFS=$'\t' read -r VM_ID VM_NAME RESOURCE_GROUP LOCATION SUBSCRIPTION; do
            CONFIG_FILE="agents/otel/config/Linux/$VM_NAME.yaml"
            # Replace Private API key in the config file (if needed)
            if [[ -f "$CONFIG_FILE" ]]; then
              sed -i "s/private_key: \"REPLACE_ME\"/private_key: \"${SHERPA_PRIVATE_KEY}\"/" "$CONFIG_FILE"
              git add "$CONFIG_FILE"
            fi
          done < linux_vms.tsv

        env:
          SHERPA_PRIVATE_KEY: ${{ secrets.SHERPA_PRIVATE_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install or Update OpenTelemetry Agent per VM
        run: |
          INSTALLED_VMS=()
          UPDATED_VMS=()
          INSTALLED_VERSIONS=()
          
          for VM_ID in $ACTIVE_VM_IDS; do
            SAFE_VM_ID=$(echo "$VM_ID" | sed 's/[^a-zA-Z0-9_]/_/g')
            VM_NAME_VAR="NAME_$SAFE_VM_ID"
            SUBSCRIPTION_VAR="SUB_$SAFE_VM_ID"
            
            VM_NAME=${!VM_NAME_VAR}
            SUBSCRIPTION=${!SUBSCRIPTION_VAR}
            
            if [[ -z "$VM_NAME" || -z "$SUBSCRIPTION" ]]; then
              echo "VM_NAME or SUBSCRIPTION not set for $VM_ID"
              continue
            fi

            echo "Checking OpenTelemetry installation on VM: $VM_NAME"
            
            # Set subscription context
            az account set --subscription "$SUBSCRIPTION"
           
            # Fetch latest OpenTelemetry version
            LATEST_VERSION=$(curl -s https://api.github.com/repos/open-telemetry/opentelemetry-collector-releases/releases/latest | jq -r '.tag_name' | sed 's/v//')
            echo "Latest OpenTelemetry Collector version: $LATEST_VERSION"
 
            # Check if OpenTelemetry is installed
            VERSION_CHECK_RESULT=$(az vm run-command invoke \
              --ids "$VM_ID" \
              --command-id RunShellScript \
              --scripts 'if command -v /usr/local/bin/otelcol-agent; then /usr/local/bin/otelcol-agent --version | awk '\''{for (i=1; i<=NF; i++) if ($i ~ /^[0-9]+\.[0-9]+/) print $i}'\'' | grep -oE '\''[0-9]+(\.[0-9]+)*'\''; else echo NOT_INSTALLED; fi' \
              --query "value[0].message" \
              -o tsv 2>&1) || {
              echo "!!!Failed to check version on $VM_NAME: $VERSION_CHECK_RESULT"
              continue
            }
   
            # Extract installed version from result
            INSTALLED_VERSION=$(echo "$VERSION_CHECK_RESULT" | grep -oE '[0-9]+(\.[0-9]+)*' | head -1)
            if [[ -z "$INSTALLED_VERSION" ]]; then
              INSTALLED_VERSION="NOT_INSTALLED"
            fi
   
            if [[ "$INSTALLED_VERSION" == "NOT_INSTALLED" ]]; then
              echo "!!! OpenTelemetry Agent is NOT installed on $VM_NAME. Proceeding with installation..."
              INSTALLED_VMS+=("$VM_NAME")
            elif [[ "$INSTALLED_VERSION" != "$LATEST_VERSION" ]]; then
              echo "Upgrading OpenTelemetry Agent on $VM_NAME (from $INSTALLED_VERSION to $LATEST_VERSION)..."
              UPDATED_VMS+=("$VM_NAME")
            else
              echo "OpenTelemetry Agent is already up-to-date ($LATEST_VERSION) on $VM_NAME. Skipping update."
              INSTALLED_VERSIONS+=("$VM_NAME:$INSTALLED_VERSION")
              continue
            fi
   
            # Read architecture from stored environment variables
            ARCH_VAR="ARCH_$SAFE_VM_ID"
            ARCH=${!ARCH_VAR}
   
            echo "Using architecture: $ARCH"
   
            # Construct OTEL download URL
            OTEL_URL="https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v${LATEST_VERSION}/otelcol-contrib_${LATEST_VERSION}_linux_${ARCH}.tar.gz"
            
            # Check if config files exist before installing
            CONFIG_FILE="agents/otel/config/Linux/$VM_NAME.yaml"
            if [[ ! -f "$CONFIG_FILE" ]]; then
              echo "!!!Config file for $VM_NAME not found! Skipping..."
              continue
            fi
            CONFIG_CONTENT=$(base64 -w 0 < "$CONFIG_FILE")
   
            SERVICE_FILE="agents/otel/config/Linux/otelcol-agent.service.yaml"
            if [[ ! -f "$SERVICE_FILE" ]]; then
              echo "!!!Service file not found! Skipping..."
              continue
            fi
   
            SERVICE_CONTENT=$(base64 -w 0 < "$SERVICE_FILE")
    
            # Install OpenTelemetry using Azure Run Command
            echo "Installing OpenTelemetry on $VM_NAME..."
            INSTALL_RESULT=$(az vm run-command invoke \
              --ids "$VM_ID" \
              --command-id RunShellScript \
              --scripts "
                wget -O /tmp/otelcol.tar.gz '$OTEL_URL' &&
                tar -xvf /tmp/otelcol.tar.gz -C /tmp &&
                sudo mv /tmp/otelcol-contrib /usr/local/bin/otelcol-agent &&
                sudo chown root:root /usr/local/bin/otelcol-agent &&
                sudo chmod +x /usr/local/bin/otelcol-agent &&
                echo '$CONFIG_CONTENT' | base64 --decode | sudo tee /etc/otel-agent-config.yaml > /dev/null &&
                echo '$SERVICE_CONTENT' | base64 --decode | sudo tee /etc/systemd/system/otelcol-agent.service > /dev/null &&
                sudo systemctl daemon-reload &&
                sudo systemctl enable otelcol-agent &&
                sudo systemctl restart otelcol-agent &&
                sleep 5 &&
                if [[ \$(systemctl is-active otelcol-agent) == 'active' ]]; then 
                  echo 'OpenTelemetry Agent is running successfully!'
                else 
                  echo '❌ OpenTelemetry Agent failed to start. Showing logs:'
                  sudo journalctl -u otelcol-agent --no-pager --lines=50
                  exit 1
                fi
              " \
              --query "value[0].message" \
              -o tsv 2>&1) || {
              echo "!!!Installation failed on $VM_NAME: $INSTALL_RESULT"
              continue
            }
     
            echo "Installation result for $VM_NAME: $INSTALL_RESULT"
   
            # Store installed versions
            INSTALLED_VERSIONS+=("$VM_NAME:$LATEST_VERSION")
          done
   
          echo "INSTALLED_VERSIONS=${INSTALLED_VERSIONS[*]}" >> $GITHUB_ENV
          echo "UPDATED_VMS=${UPDATED_VMS[*]}" >> $GITHUB_ENV
          echo "INSTALLED_VMS=${INSTALLED_VMS[*]}" >> $GITHUB_ENV

      - name: Check and Update Configuration Files if Needed
        run: |
          UPDATED_CONFIG_VMS=()
          FAILED_RESTART_VMS=()
    
          for VM_ID in $ACTIVE_VM_IDS; do
            SAFE_VM_ID=$(echo "$VM_ID" | sed 's/[^a-zA-Z0-9_]/_/g')
            VM_NAME_VAR="NAME_$SAFE_VM_ID"
            SUBSCRIPTION_VAR="SUB_$SAFE_VM_ID"
            
            VM_NAME=${!VM_NAME_VAR}
            SUBSCRIPTION=${!SUBSCRIPTION_VAR}
            
            if [[ -z "$VM_NAME" || -z "$SUBSCRIPTION" ]]; then
              echo "VM_NAME or SUBSCRIPTION not set for $VM_ID"
              continue
            fi

            echo "Checking configuration updates for $VM_NAME..."
            
            # Set subscription context
            az account set --subscription "$SUBSCRIPTION"
   
            CONFIG_FILE="agents/otel/config/Linux/$VM_NAME.yaml"
            DEFAULT_CONFIG_FILE="agents/otel/config/azure-otel-agent-sherpa.yaml"
            
            if [[ ! -f "$CONFIG_FILE" ]]; then
              if [[ -f "$DEFAULT_CONFIG_FILE" ]]; then
                echo "Config file for $VM_NAME not found. Copying default config..."
                cp "$DEFAULT_CONFIG_FILE" "$CONFIG_FILE"
              else
                echo "!!!Default config file not found! Skipping $VM_NAME..."
                continue
              fi
            fi
    
            # Get the current config checksum on the server
            CHECKSUM_RESULT=$(az vm run-command invoke \
              --ids "$VM_ID" \
              --command-id RunShellScript \
              --scripts 'if [ -f /etc/otel-agent-config.yaml ]; then md5sum /etc/otel-agent-config.yaml | awk '\''{print $1}'\''; else echo MISSING_FILE; fi' \
              --query "value[0].message" \
              -o tsv 2>&1) || {
              echo "!!!Failed to get config checksum for $VM_NAME: $CHECKSUM_RESULT"
              continue
            }
    
            SERVER_CHECKSUM=$(echo "$CHECKSUM_RESULT" | grep -oE '[a-f0-9]{32}' | head -1)
     
            # Compute the local config file checksum
            LOCAL_CHECKSUM=$(md5sum "$CONFIG_FILE" | awk '{print $1}')
     
            echo "Server Config Hash: $SERVER_CHECKSUM"
            echo "Local Config Hash: $LOCAL_CHECKSUM"
    
            # If hashes match, skip update
            if [[ "$SERVER_CHECKSUM" == "$LOCAL_CHECKSUM" ]]; then
              echo "Config is already up-to-date on $VM_NAME. Skipping update."
              continue
            fi
     
            echo "Config has changed! Updating on $VM_NAME..."
            UPDATED_CONFIG_VMS+=("$VM_NAME")
     
            # Encode file content
            CONFIG_CONTENT=$(base64 -w 0 < "$CONFIG_FILE")
    
            # Update config and restart agent
            UPDATE_RESULT=$(az vm run-command invoke \
              --ids "$VM_ID" \
              --command-id RunShellScript \
              --scripts "
                echo '$CONFIG_CONTENT' | base64 --decode | sudo tee /etc/otel-agent-config.yaml > /dev/null &&
                echo 'Restarting OpenTelemetry Service...' &&
                sudo systemctl daemon-reload &&
                sudo systemctl restart otelcol-agent &&
                sleep 5 &&
                if [[ \$(systemctl is-active otelcol-agent) == 'active' ]]; then 
                  echo 'OpenTelemetry Agent restarted successfully!'
                else 
                  echo '❌ OpenTelemetry Agent failed to restart. Showing logs:'
                  sudo journalctl -u otelcol-agent --no-pager --lines=50
                  exit 1
                fi
              " \
              --query "value[0].message" \
              -o tsv 2>&1) || {
              echo "!!!Config update failed on $VM_NAME: $UPDATE_RESULT"
              FAILED_RESTART_VMS+=("$VM_NAME")
              continue
            }
     
            echo "Update result for $VM_NAME: $UPDATE_RESULT"
     
            # Verify if the agent restarted successfully
            STATUS_RESULT=$(az vm run-command invoke \
              --ids "$VM_ID" \
              --command-id RunShellScript \
              --scripts 'systemctl is-active otelcol-agent' \
              --query "value[0].message" \
              -o tsv 2>&1) || {
              echo "!!!Failed to check agent status on $VM_NAME"
              FAILED_RESTART_VMS+=("$VM_NAME")
              continue
            }
     
            AGENT_STATUS=$(echo "$STATUS_RESULT" | grep -oE 'active|inactive|failed' | head -1)
     
            if [[ "$AGENT_STATUS" == "active" ]]; then
              echo "OpenTelemetry Agent is running successfully after restart on $VM_NAME."
            else
              echo "!!!OpenTelemetry Agent failed to restart on $VM_NAME!"
              FAILED_RESTART_VMS+=("$VM_NAME")
            fi
          done
     
          echo "UPDATED_CONFIG_VMS=${UPDATED_CONFIG_VMS[*]}" >> $GITHUB_ENV
          echo "FAILED_RESTART_VMS=${FAILED_RESTART_VMS[*]}" >> $GITHUB_ENV

      - name: Final Summary
        run: |
          echo "OpenTelemetry Installation & Configuration Summary"
          echo "---------------------------------------------"
    
          ACTIVE_VMS="${ACTIVE_VM_IDS:-}"
          SKIPPED_VMS="${SKIPPED_VMS:-}"
          UPDATED_CONFIG_VMS="${UPDATED_CONFIG_VMS:-}"
          FAILED_RESTART_VMS="${FAILED_RESTART_VMS:-}"
          INSTALLED_VERSIONS="${INSTALLED_VERSIONS:-}"
          UPDATED_VMS="${UPDATED_VMS:-}"
          INSTALLED_VMS="${INSTALLED_VMS:-}"
      
          echo "Active VMs Processed:"
          if [[ -n "$INSTALLED_VERSIONS" ]]; then
            for entry in $INSTALLED_VERSIONS; do
              VM_NAME=$(echo $entry | cut -d: -f1)
              VERSION=$(echo $entry | cut -d: -f2)
              echo -e "\e[1;32m   - $VM_NAME running OpenTelemetry Agent version: $VERSION.\e[0m"
            done
          else
            echo -e "\e[1;31m   - No active VMs detected.\e[0m"
            exit 0
          fi
      
          if [[ -n "$UPDATED_VMS" ]]; then
            echo -e "\e[1;33mVMs Updated: $UPDATED_VMS.\e[0m"
          else
            echo -e "\e[1;34mNo VMs required an update.\e[0m"
          fi
     
          if [[ -n "$INSTALLED_VMS" ]]; then
            echo -e "\e[1;33mNewly Installed VMs: $INSTALLED_VMS\e[0m"
          else
            echo -e "\e[1;34mNo new installations were required.\e[0m"
          fi
    
          if [[ -n "$UPDATED_CONFIG_VMS" ]]; then
            echo -e "\e[1;33mConfigurations Updated on: $UPDATED_CONFIG_VMS\e[0m"
          else
            echo -e "\e[1;34mNo configuration updates were needed.\e[0m"
          fi
      
          if [[ -z "$UPDATED_CONFIG_VMS" ]]; then
            echo -e "\e[1;34mNo config changes detected. No restart needed.\e[0m"
          elif [[ -n "$FAILED_RESTART_VMS" ]]; then
            echo -e "\e[1;31mOpenTelemetry Agent FAILED to restart on: $FAILED_RESTART_VMS\e[0m"
          else
            echo -e "\e[1;32mAll agents restarted successfully after config update.\e[0m"
          fi
     
          if [[ -n "$SKIPPED_VMS" ]]; then
            echo -e "\e[1;33mVMs Skipped: $SKIPPED_VMS\e[0m"
          fi
     
          echo "---------------------------------------------"
          echo -e "\e[1;32mOpenTelemetry setup completed successfully!\e[0m"